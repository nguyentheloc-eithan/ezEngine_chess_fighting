// write your helper functions here

void rotateRight(Node* x) {
        Node* y = x->pLeft;
        x->pLeft = y->pRight;
        if (y->pRight) {
            y->pRight->pParent = x;
        }
        y->pParent = x->pParent;
        if (!x->pParent) {
            root = y;
        } else if (x == x->pParent->pRight) {
            x->pParent->pRight = y;
        } else {
            x->pParent->pLeft = y;
        }
        y->pRight = x;
        x->pParent = y;
    }

    // Helper function to perform a left rotation
    void rotateLeft(Node* x) {
        Node* y = x->pRight;
        x->pRight = y->pLeft;
        if (y->pLeft) {
            y->pLeft->pParent = x;
        }
        y->pParent = x->pParent;
        if (!x->pParent) {
            root = y;
        } else if (x == x->pParent->pLeft) {
            x->pParent->pLeft = y;
        } else {
            x->pParent->pRight = y;
        }
        y->pLeft = x;
        x->pParent = y;
    }

    // Helper function to perform splay operation
    void splay(Node* x) {
        while (x->pParent) {
            if (!x->pParent->pParent) {
                if (x == x->pParent->pLeft) {
                    rotateRight(x->pParent);
                } else {
                    rotateLeft(x->pParent);
                }
            } else if (x == x->pParent->pLeft && x->pParent == x->pParent->pParent->pLeft) {
                rotateRight(x->pParent->pParent);
                rotateRight(x->pParent);
            } else if (x == x->pParent->pRight && x->pParent == x->pParent->pParent->pRight) {
                rotateLeft(x->pParent->pParent);
                rotateLeft(x->pParent);
            } else if (x == x->pParent->pRight && x->pParent == x->pParent->pParent->pLeft) {
                rotateLeft(x->pParent);
                rotateRight(x->pParent);
            } else {
                rotateRight(x->pParent);
                rotateLeft(x->pParent);
            }
        }
    }

void insert(int val) {
 Node* newNode = new Node(val);
        if (!root) {
            root = newNode;
            return;
        }
        Node* current = root;
        Node* parent = nullptr;
        while (current) {
            parent = current;
            if (val < current->val) {
                current = current->pLeft;
            } else {
                current = current->pRight;
            }
        }
        if (val < parent->val) {
            parent->pLeft = newNode;
        } else {
            parent->pRight = newNode;
        }
        newNode->pParent = parent;
        splay(newNode);
    
}

////////////////////2/////
// Write your helper functions here

 bool search(int val) {
        Node* current = root;
        Node* parent = nullptr;
        while (current && current->val != val) {
            parent = current;
            if (val < current->val) {
                current = current->pLeft;
            } else {
                current = current->pRight;
            }
        }
        if (current) {
            splay(current);
            return true;
        } else if (parent) {
            splay(parent);
        }
        return false;
    }




    ///////////////////3/////////////
    Node* findMax (Node* node) {
    while (node -> pRight != NULL) node = node -> pRight;
    return node;
}

Node* remove (int val) {
    if (root == NULL) return NULL;
    search (val);
    if (root -> val != val) return NULL;
    Node* tree1 = root -> pLeft;
    Node* tree2 = root -> pRight;
    if (tree1 == NULL) {
        Node* del = root;
        root = tree2;
        root -> pParent = NULL;
        return del;
    }
    else if (tree2 == NULL) {
        Node* del = root;
        root = tree1;
        root -> pParent = NULL;
        return del;
    }
    else {
        Node* del = this -> root;
        Node* max = findMax (this -> root -> pLeft);
        del = this -> root;
        this -> root = this -> root -> pLeft;
        this -> root -> pParent = NULL;
        del -> pLeft = NULL;
        splay (max);
        this -> root -> pRight = del -> pRight;
        del -> pRight -> pParent = this -> root;
        del -> pRight = NULL;
        return del;
    }
}